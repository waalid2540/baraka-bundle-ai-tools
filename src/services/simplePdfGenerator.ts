// BarakahTool Simple Working PDF Generator
// Guaranteed to work - simplified version

import jsPDF from 'jspdf'

interface SimpleDuaData {
  arabicText: string
  transliteration?: string
  translation: string
  language: string
  situation: string
  theme?: string
}

class SimplePdfGenerator {
  
  async generateSimplePdf(duaData: SimpleDuaData): Promise<Blob> {
    console.log('Generating simple PDF with data:', duaData)
    
    try {
      // Create PDF directly without HTML
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      })
      
      // Set up colors
      const gold = [212, 175, 55]
      const green = [80, 200, 120]
      const dark = [44, 62, 80]
      
      // Add border
      pdf.setDrawColor(gold[0], gold[1], gold[2])
      pdf.setLineWidth(2)
      pdf.rect(10, 10, 190, 277)
      
      // Add inner border
      pdf.setLineWidth(0.5)
      pdf.rect(15, 15, 180, 267)
      
      // Add header background
      pdf.setFillColor(gold[0], gold[1], gold[2])
      pdf.rect(15, 15, 180, 30, 'F')
      
      // Add Bismillah
      pdf.setTextColor(255, 255, 255)
      pdf.setFontSize(20)
      pdf.setFont('helvetica', 'bold')
      pdf.text('In the Name of Allah, Most Gracious, Most Merciful', 105, 30, { align: 'center' })
      
      // Add title
      pdf.setTextColor(dark[0], dark[1], dark[2])
      pdf.setFontSize(24)
      pdf.text('Sacred Islamic Dua', 105, 60, { align: 'center' })
      
      // Add subtitle
      pdf.setFontSize(12)
      pdf.setFont('helvetica', 'normal')
      pdf.text('Generated by BarakahTool - Premium Islamic Platform', 105, 70, { align: 'center' })
      
      // Add situation section
      pdf.setDrawColor(gold[0], gold[1], gold[2])
      pdf.setLineWidth(0.5)
      pdf.line(20, 80, 190, 80)
      
      pdf.setTextColor(dark[0], dark[1], dark[2])
      pdf.setFontSize(11)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Your Request:', 20, 90)
      
      pdf.setFont('helvetica', 'normal')
      pdf.setFontSize(10)
      const situationLines = pdf.splitTextToSize(duaData.situation || 'General supplication for blessings', 170)
      pdf.text(situationLines, 20, 98)
      
      // Add Arabic section
      const arabicY = 98 + (situationLines.length * 5) + 10
      pdf.setFillColor(255, 248, 220)
      pdf.rect(20, arabicY, 170, 40, 'F')
      pdf.setDrawColor(gold[0], gold[1], gold[2])
      pdf.rect(20, arabicY, 170, 40)
      
      pdf.setTextColor(gold[0], gold[1], gold[2])
      pdf.setFontSize(14)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Arabic Dua:', 105, arabicY + 8, { align: 'center' })
      
      pdf.setTextColor(dark[0], dark[1], dark[2])
      pdf.setFontSize(16)
      const arabicLines = pdf.splitTextToSize(duaData.arabicText || 'اللَّهُمَّ بَارِكْ لَنَا', 160)
      pdf.text(arabicLines, 105, arabicY + 20, { align: 'center' })
      
      // Add transliteration if available
      let currentY = arabicY + 50
      if (duaData.transliteration) {
        pdf.setTextColor(green[0], green[1], green[2])
        pdf.setFontSize(11)
        pdf.setFont('helvetica', 'bold')
        pdf.text('Pronunciation:', 20, currentY)
        
        pdf.setTextColor(dark[0], dark[1], dark[2])
        pdf.setFont('helvetica', 'italic')
        pdf.setFontSize(10)
        const translitLines = pdf.splitTextToSize(duaData.transliteration, 170)
        pdf.text(translitLines, 20, currentY + 8)
        currentY += 8 + (translitLines.length * 5) + 10
      }
      
      // Add translation
      pdf.setFillColor(255, 240, 245)
      pdf.rect(20, currentY, 170, 35, 'F')
      pdf.setDrawColor(green[0], green[1], green[2])
      pdf.rect(20, currentY, 170, 35)
      
      pdf.setTextColor(green[0], green[1], green[2])
      pdf.setFontSize(11)
      pdf.setFont('helvetica', 'bold')
      pdf.text(`${duaData.language || 'English'} Translation:`, 105, currentY + 8, { align: 'center' })
      
      pdf.setTextColor(dark[0], dark[1], dark[2])
      pdf.setFont('helvetica', 'italic')
      pdf.setFontSize(10)
      const transLines = pdf.splitTextToSize(duaData.translation || 'O Allah, bless us', 160)
      pdf.text(transLines, 105, currentY + 18, { align: 'center' })
      
      // Add guidance section
      currentY += 45
      pdf.setTextColor(dark[0], dark[1], dark[2])
      pdf.setFontSize(10)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Spiritual Guidance:', 20, currentY)
      
      pdf.setFont('helvetica', 'normal')
      pdf.setFontSize(9)
      const guidance = [
        '• Best times: Last third of night, between Adhan & Iqamah',
        '• Recite with sincerity and complete trust in Allah',
        '• Repeat 3, 7, or 33 times for increased blessing',
        '• Make wudu before recitation for added reward'
      ]
      
      guidance.forEach((line, index) => {
        pdf.text(line, 25, currentY + 8 + (index * 5))
      })
      
      // Add footer
      pdf.setDrawColor(gold[0], gold[1], gold[2])
      pdf.setLineWidth(1)
      pdf.line(20, 270, 190, 270)
      
      pdf.setTextColor(gold[0], gold[1], gold[2])
      pdf.setFontSize(10)
      pdf.setFont('helvetica', 'bold')
      pdf.text('BarakahTool - Premium Islamic Digital Platform', 105, 278, { align: 'center' })
      
      pdf.setTextColor(dark[0], dark[1], dark[2])
      pdf.setFontSize(8)
      pdf.setFont('helvetica', 'italic')
      pdf.text('May Allah accept your supplication and grant you success', 105, 283, { align: 'center' })
      
      // Return the PDF as blob
      return pdf.output('blob')
      
    } catch (error) {
      console.error('Simple PDF generation error:', error)
      
      // Fallback: Create a very basic PDF
      const fallbackPdf = new jsPDF()
      fallbackPdf.setFontSize(20)
      fallbackPdf.text('Islamic Dua', 105, 30, { align: 'center' })
      fallbackPdf.setFontSize(12)
      fallbackPdf.text('Arabic: ' + (duaData.arabicText || 'No Arabic text'), 20, 50)
      fallbackPdf.text('Translation: ' + (duaData.translation || 'No translation'), 20, 70)
      fallbackPdf.text('Generated by BarakahTool', 20, 90)
      
      return fallbackPdf.output('blob')
    }
  }
}

export const simplePdfGenerator = new SimplePdfGenerator()
export default simplePdfGenerator